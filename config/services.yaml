# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    mail_sender: "entreprendre31@gmail.com"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: false      # Automatically injects dependencies in your services.
        autoconfigure: false # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Repository\:
        resource: '../src/Repository'
        autowire: true;
        tags: ['doctrine.repository_service']

    App\DataFixtures\:
            resource: '../src/DataFixtures'
            autowire: true;
            tags: ['doctrine.fixture.orm']

    # Création d'un listener permettant de rediriger vers / quand l'user connecté
    # n'a pas accès à l'interface admin
    access.denied.route:
        class: App\Security\AccessDeniedHandler
        arguments: ["@router"]
        public: true

    # Création des services mailers et event subscribers
    service.smart.mailer:
        class: App\Services\Mailer\Mailer\SmartMailer
        arguments: ["@mailer"]
        public: true

    contact.mailer.subscriber:
        class: App\EventListener\MailerSubscriber
        arguments: ["@service.smart.mailer","%mail_sender%"]
        public: true
        tags:
            - { name: kernel.event_subscriber }

    contact.recorder.subscriber:
        class: App\EventListener\ContactRecorderSubscriber
        arguments: ["@doctrine"]
        public: true
        tags:
            - { name : kernel.event_subscriber }

